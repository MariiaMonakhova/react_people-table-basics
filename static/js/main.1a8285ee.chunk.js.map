{"version":3,"sources":["api.ts","components/NoPeopleError.tsx","components/Loader/Loader.tsx","components/PeopleLoadingError.tsx","components/PeopleLink.tsx","components/PeopleTable.tsx","components/PeoplePage.tsx","components/HomePage.tsx","components/NotFoundPage.tsx","components/NavBar.tsx","App.tsx","index.tsx"],"names":["getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","NoPeopleError","Loader","className","PeopleLoadingError","PeopleLink","person","onFindPerson","personSlug","useParams","classNames","slug","to","sex","name","born","died","motherName","undefined","fatherName","PeopleTable","people","findPerson","find","map","PeoplePage","useState","setPeople","showError","setShowError","loading","setLoading","useEffect","peopleFromServer","catch","error","finally","length","HomePage","NotFoundPage","NavBar","role","isActive","App","path","element","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.1a8285ee.chunk.js","sourcesContent":["import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","export const NoPeopleError = () => {\n  return (\n    <p data-cy=\"noPeopleMessage\">\n      There are no people on the server\n    </p>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export const PeopleLoadingError = () => {\n  return (\n    <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n      Something went wrong\n    </p>\n  );\n};\n","/* eslint-disable no-nested-ternary */\nimport classNames from 'classnames';\nimport React from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person,\n  onFindPerson: (name: string) => Person | undefined,\n};\nexport const PeopleLink: React.FC<Props> = ({ person, onFindPerson }) => {\n  const { personSlug } = useParams();\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={classNames({\n        'has-background-warning': personSlug === person.slug,\n      })}\n    >\n      <td>\n        <Link\n          to={`${person.slug}`}\n          className={classNames({\n            'has-text-danger': person.sex === 'f',\n          })}\n        >\n          {person.name}\n        </Link>\n      </td>\n\n      <td>{person.sex}</td>\n      <td>{person.born}</td>\n      <td>{person.died}</td>\n      <td>\n        {person.motherName !== null\n        && onFindPerson(person.motherName) !== undefined\n        && (\n          <Link\n            className=\"has-text-danger\"\n            to={`${\n              onFindPerson(person.motherName)?.slug || ''\n            }`}\n          >\n            {person.motherName}\n          </Link>\n        )}\n\n        {person.motherName !== null\n        && onFindPerson(person.motherName) === undefined && (\n          `${person.motherName}`\n        )}\n\n        {!person.motherName && '-'}\n      </td>\n      <td>\n        {person.fatherName !== null\n        && onFindPerson(person.fatherName) !== undefined\n        && (\n          <Link\n            to={`${\n              onFindPerson(person.fatherName)?.slug || ''\n            }`}\n          >\n            {person.fatherName}\n          </Link>\n        )}\n\n        {person.fatherName !== null\n        && onFindPerson(person.fatherName) === undefined && (\n          `${person.fatherName}`\n        )}\n\n        {!person.fatherName && '-'}\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { Person } from '../types';\nimport { PeopleLink } from './PeopleLink';\n\ntype Props = {\n  people: Person[];\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const findPerson = (name: string | null) => {\n    return people.find(person => person.name === name);\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Sex</th>\n          <th>Born</th>\n          <th>Died</th>\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => (\n          <PeopleLink\n            key={person.slug}\n            person={person}\n            onFindPerson={findPerson}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { getPeople } from '../api';\nimport { Person } from '../types';\nimport { NoPeopleError } from './NoPeopleError';\nimport { Loader } from './Loader';\nimport { PeopleLoadingError } from './PeopleLoadingError';\nimport { PeopleTable } from './PeopleTable';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [showError, setShowError] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    getPeople()\n      .then((peopleFromServer) => {\n        setLoading(true);\n        setPeople(peopleFromServer);\n      })\n      .catch((error) => {\n        setShowError(true);\n        throw error;\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }, []);\n\n  return (\n    <div className=\"block\">\n      <h1 className=\"title\">People Page</h1>\n      <div className=\"box table-container\">\n        {loading ? (\n          <Loader />\n        ) : (\n          <>\n            {showError && (\n              <PeopleLoadingError />\n            )}\n\n            {people.length === 0 && !loading && (\n              <NoPeopleError />\n            )}\n\n            <PeopleTable people={people} />\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n","export const HomePage = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","export const NotFoundPage = () => {\n  return (\n    <h1 className=\"title\">Page not found</h1>\n  );\n};\n","import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nexport const NavBar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={({ isActive }) => classNames('navbar-item', {\n              'has-background-grey-lighter': isActive,\n            })}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            className={({ isActive }) => classNames('navbar-item', {\n              'has-background-grey-lighter': isActive,\n            })}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Navigate, Route, Routes } from 'react-router-dom';\nimport './App.scss';\nimport { PeoplePage } from './components/PeoplePage';\nimport { HomePage } from './components/HomePage';\nimport { NotFoundPage } from './components/NotFoundPage';\nimport { NavBar } from './components/NavBar';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <NavBar />\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Routes>\n          <Route path=\"/\" element={<HomePage />} />\n          <Route path=\"/people\" element={<PeoplePage />}>\n            <Route path=\":personSlug\" element={<PeoplePage />} />\n          </Route>\n          <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n          <Route path=\"*\" element={<NotFoundPage />} />\n        </Routes>\n      </div>\n    </main>\n  </div>\n);\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}